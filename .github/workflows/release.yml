name: release
on:
  push:
    tags:
      - '*'

permissions:
  contents: read

jobs:
  release:
    permissions:
      contents: write  # for actions/create-release to create a release
    name: Create draft release
    runs-on: ubuntu-latest
    if: github.repository == 'milex/milex'

    outputs:
      milex-version: ${{ steps.get-milex-version.outputs.version }}
      is-prerelease: ${{ steps.is-prerelease.outputs.is-prerelease }}

    steps:
    - uses: actions/checkout@v2
      # Our build script needs access to all previous tags, so we add fetch-depth: 0
      with:
        fetch-depth: 0
    
    - name: Setup PHP, with composer and extensions
      uses: shivammathur/setup-php@v2
      with:
        php-version: 7.4
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, mysql, pdo_mysql

    - name: Get tag name
      id: get-milex-version
      run: echo "::set-output name=version::${GITHUB_REF/refs\/tags\//}"

    - name: Check if tag name matches version in release_metadata.json
      run: |
        METADATA_VERSION=$(jq -r '.version' app/release_metadata.json)

        if [[ "${{ steps.get-milex-version.outputs.version }}" != "$METADATA_VERSION" ]]; then
          echo "❌ ERROR: tag name (${{ steps.get-milex-version.outputs.version }}) doesn't match version in app/release_metadata.json ($METADATA_VERSION). Please ensure that both versions match!"
          exit 1
        else
          echo "✔ Tag name (${{ steps.get-milex-version.outputs.version }}) and the version in app/release_metadata.json ($METADATA_VERSION) match. Great!"
        fi

    - name: Install dependencies
      run: |
        composer validate
        composer install --prefer-dist --no-progress --no-suggest

    - name: Build release files
      run: |
        php build/package_release.php -b=${{ steps.get-milex-version.outputs.version }}
        echo 'MILEX_SHA1_CONTENTS<<EOF' >> $GITHUB_ENV
        cat build/packages/build-sha1-all >> $GITHUB_ENV
        echo 'EOF' >> $GITHUB_ENV

    - name: "Prerelease or not?"
      id: is-prerelease
      run: |
        STABILITY=$(jq -r '.stability' app/release_metadata.json)

        if [[ "${STABILITY}" == 'stable' ]]; then
          PRERELEASE=false
        else
          PRERELEASE=true
        fi

        echo "::set-output name=is-prerelease::${PRERELEASE}"

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get-milex-version.outputs.version }}
        release_name: Milex Community ${{ steps.get-milex-version.outputs.version }}
        draft: true
        prerelease: ${{ steps.is-prerelease.outputs.is-prerelease }}
        body: |
          ${{ env.MILEX_CHANGELOG }}

          ${{ env.MILEX_SHA1_CONTENTS }}

    - name: Upload full package ${{ steps.get-milex-version.outputs.version }}.zip
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./build/packages/${{ steps.get-milex-version.outputs.version }}.zip
        asset_name: ${{ steps.get-milex-version.outputs.version }}.zip
        asset_content_type: application/zip

    - name: Upload update package ${{ steps.get-milex-version.outputs.version }}-update.zip
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./build/packages/${{ steps.get-milex-version.outputs.version }}-update.zip
        asset_name: ${{ steps.get-milex-version.outputs.version }}-update.zip
        asset_content_type: application/zip

    - name: Store full package artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ steps.get-milex-version.outputs.version }}.zip
        path: ./build/packages/${{ steps.get-milex-version.outputs.version }}.zip

    - name: Store update package artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ steps.get-milex-version.outputs.version }}-update.zip
        path: ./build/packages/${{ steps.get-milex-version.outputs.version }}-update.zip

  test-fresh-install:
    name: Test a fresh installation
    needs: release
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_DATABASE: milextest
        ports:
          - 3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    # We need this so we can get the local.php override file
    - uses: actions/checkout@v2

    - name: Setup PHP, with composer and extensions
      uses: shivammathur/setup-php@v2
      with:
        php-version: 7.4
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, mysql, pdo_mysql

    - name: Download full installation package from previous step
      uses: actions/download-artifact@v2
      with:
        name: ${{ needs.release.outputs.milex-version }}.zip

    - name: Install Milex
      env:
        DB_PORT: ${{ job.services.mysql.ports[3306] }}
      run: |
        unzip -q ${{ needs.release.outputs.milex-version }}.zip -d ./milex-testing
        mkdir -p ./milex-testing/var/logs
        cp ./.github/ci-files/local.php ./milex-testing/app/config/local.php
        cd ./milex-testing
        php bin/console milex:install --force http://localhost

    - name: Store log artifacts
      if: ${{ always() }}
      uses: actions/upload-artifact@v2
      with:
        name: install-logs
        path: ./milex-testing/var/logs/*

  test-update-install:
    name: Test updating from previous version
    needs: release
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_DATABASE: milextest
        ports:
          - 3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      # We need this so we can get the local.php override file
    - uses: actions/checkout@v2

    - name: Get tag name and minimum Milex version
      run: |
        echo "MILEX_MINIMUM_VERSION=$(jq -r '.minimum_milex_version' app/release_metadata.json)" >> $GITHUB_ENV
        echo "MILEX_PHP_MINIMUM_VERSION=$(jq -r '.minimum_php_version' app/release_metadata.json)" >> $GITHUB_ENV

    - name: Setup PHP, with composer and extensions
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.MILEX_PHP_MINIMUM_VERSION }}
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, mysql, pdo_mysql

    - name: "Download and install minimum Milex version: ${{ env.MILEX_MINIMUM_VERSION }}"
      env:
        DB_PORT: ${{ job.services.mysql.ports[3306] }}
      run: |
        curl -sSL https://github.com/milex/milex/releases/download/${{ env.MILEX_MINIMUM_VERSION }}/${{ env.MILEX_MINIMUM_VERSION }}.zip -o ${{ env.MILEX_MINIMUM_VERSION }}.zip
        unzip -q ${{ env.MILEX_MINIMUM_VERSION }}.zip -d ./milex-testing
        mkdir -p ./milex-testing/var/logs
        cp ./.github/ci-files/local.php ./milex-testing/app/config/local.php
        cd ./milex-testing
        php bin/console milex:install --force http://localhost
    
    - name: "Download update package artifact ${{ needs.release.outputs.milex-version }}-update.zip"
      uses: actions/download-artifact@v2
      with:
        name: ${{ needs.release.outputs.milex-version }}-update.zip
        path: ./milex-testing

    - name: "Attempt update from ${{ env.MILEX_MINIMUM_VERSION }} to ${{ needs.release.outputs.milex-version }}"
      env:
        DB_PORT: ${{ job.services.mysql.ports[3306] }}
      working-directory: ./milex-testing
      run: |
        php bin/console milex:update:apply --force --update-package=${{ needs.release.outputs.milex-version }}-update.zip
        php bin/console milex:update:apply --finish

    - name: Store log artifacts
      if: ${{ always() }}
      uses: actions/upload-artifact@v2
      with:
        name: update-logs
        path: ./milex-testing/var/logs/*

  upload-release-asset:
    name: Upload release asset to m.milex.org
    needs: [release, test-fresh-install, test-update-install]
    # We only want this job to run in Milex's repo, not in forks
    if: github.repository_owner == 'milex' && needs.release.outputs.is-prerelease
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Setup PHP, with composer and extensions
      uses: shivammathur/setup-php@v2
      with:
        php-version: 7.4
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, mysql, pdo_mysql

    - name: Install dependencies
      working-directory: ./.github/workflows/milex-asset-upload
      run: composer install --prefer-dist --no-progress

    - name: Download full installation package from previous step
      uses: actions/download-artifact@v2
      with:
        name: ${{ needs.release.outputs.milex-version }}.zip

    # Category ID is 2 for Milex release assets on m.milex.org, that's why you're seeing "2" in the command below
    - name: Upload release asset ZIP to m.milex.org
      run: |
        php ./.github/workflows/milex-asset-upload/upload.php \
        https://m.milex.org \
        "${{ secrets.MILEX_INSTANCE_USER }}" \
        "${{ secrets.MILEX_INSTANCE_PASSWORD }}" \
        "${{ needs.release.outputs.milex-version }}" \
        4 \
        "${{ github.workspace }}/${{ needs.release.outputs.milex-version }}.zip"